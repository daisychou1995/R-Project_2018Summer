knitr::opts_chunk$set(echo = TRUE)
summary(cars)
<li>Parish</li>
# æåç¨* == ç�æ¼   != ä¸ç�æ¼e.g."character" == "character" # æç§å�é¦é åºæ¯å¤§å°(æå¾çå�æ¯æå¤§,å�é¦ç¸ååæ¯å�æ¯æ¸é)
e.g.TRUE < FALSE
setwd("D:/CSX/R-Project_2018Summer")
install.packages(gapminder)
gapminder
comics
install.packages("gapminder")
dplyr
install.packages("dplyr")
install.packages("dplyr")
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
titanictest = read.csv('./DATA/ALL/test.csv')
titanictrain = read.csv('./DATA/ALL/train.csv')
all_data <- bind_rows(titanictrain, titanictest) # 將兩組乘客資(data.frame)料合併成一個檔,bind_rows在'dylpr'
str(all_data)  # check
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = titanictrain)
titanictest = read.csv('./DATA/ALL/test.csv')
titanictrain = read.csv('./DATA/ALL/train.csv')
str(all_data)  # check
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = titanictrain)
# Adding Mother variable
full$Mother <- 'Not Mother'  # 將此列加入
# Adding Mother variable
all_data$Mother <- 'Not Mother'  # 將此列加入
all_data$Mother[all_data$Sex == 'female' & all_data$Parch > 0 & all_data$Age > 18 & all_data$Title != 'Miss'] <- 'Mother'  # Parch為小孩的數量
# Show counts
table(all_data$Mother, all_data$Survived)
# Adding Mother variable
all_data$Mother <- 'Not Mother'  # 將此列加入
all_data$Mother[all_data$Sex == 'female' & all_data$Parch > 0 & all_data$Age > 18 & all_data$Title != 'Miss'] <-'Mother'  # Parch為小孩的數量
# Show counts
table(all_data$Mother, all_data$Survived)
titanictest = read.csv('./DATA/ALL/test.csv')
titanictrain = read.csv('./DATA/ALL/train.csv')
full <- bind_rows(titanictrain, titanictest) # 將兩組乘客資(data.frame)料合併成一個檔,bind_rows在'dylpr'
str(full)  # check
# Create the column child, and indicate whether child or adult
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# Show counts
table(full$Child, full$Survived)
# Titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
# Titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title <- gsub('(.*,)|\\s|(\\..*)','',full$Name)
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
# Adding Mother variable
full$Mother <- 'Not Mother'  # 將此列加入
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <-'Mother'  # Parch為小孩的數量
# Show counts
table(full$Mother, full$Survived)
full$maybeMother[full$Sex == 'female' & full$Parch = 0 & full$Age > 18 & full$Title != 'Miss'] <- maybe
# Adding Mother variable
full$Mother <- 'Not Mother'  # 將此列加入
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <-'Mother'  # Parch為小孩的數量
# Show counts
table(full$Mother, full$Survived)
full$maybeMother[full$Sex == 'female' & full$Parch == 0 & full$Age > 18 & full$Title != 'Miss'] <- maybe
# Adding Mother variable
full$Mother <- 'Not Mother'  # 將此列加入
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <-'Mother'  # Parch為小孩的數量
# Show counts
table(full$Mother, full$Survived)
full$maybeMother[full$Sex == 'female' & full$Parch == 0 & full$Age > 18 & full$Title != 'Miss'] <- maybeMother
# Adding Mother variable
full$Mother <- 'Not Mother'  # 將此列加入
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <-'Mother'  # Parch為小孩的數量
# Show counts
table(full$Mother, full$Survived)
full$maybeMother[full$Sex == 'female' & full$Parch == 0 & full$Age > 18 & full$Title != 'Miss'] <- "maybeMother"
# Adding Mother variable
full$Mother <- 'Not Mother'  # 將此列加入
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <-'Mother'  # Parch為小孩的數量
# Show counts
table(full$Mother, full$Survived)
full$maybeMother[full$Sex == 'female' & full$Parch == 0 & full$Age > 18 & full$Title != 'Miss'] <- "maybeMother"
table(full$maybeMother, full$Survived)
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = titanictrain)
# Titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title <- gsub('(.*,)|\\s|(\\..*)','',full$Name)  #
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
# Create the column child, and indicate whether child or adult
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# Show counts
table(full$Child, full$Survived)
# Adding Mother variable
full$Mother <- 'Not Mother'  # 將此列加入
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <-'Mother'  # Parch為小孩的數量
# Show counts
table(full$Mother, full$Survived)
full$maybeMother[full$Sex == 'female' & full$Parch == 0 & full$Age > 18 & full$Title != 'Miss'] <- "maybeMother"
table(full$maybeMother, full$Survived)
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = titanictrain)
# Grab title from passenger names
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# Show title counts by sex
table(full$Sex, full$Title)
# Titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# Also reassign mlle, ms, and mme accordingly
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
# Show title counts by sex again
table(full$Sex, full$Title)
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = titanictrain)
# Finally, grab surname from passenger name
full$Surname <- sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Surname
View(full)
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = titanictrain)
# Finally, grab surname from passenger name
full$Surname <- sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
# Finally, grab surname from passenger name
full$Surname <- sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[[1]])
head(full$Surname)
full$Surname
# Finally, grab surname from passenger name
full$Surname <- sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[1])
full$Surname
# Finally, grab surname from passenger name
full$Surname <- sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Surname
full$Fsize <- full$SibSp + full$Parch + 1
full$Fsize
# Create a family size variable including the passenger themselves
full$Fsize <- full$SibSp + full$Parch + 1
# Create a family variable
full$Family <- paste(full$Surname, full$Fsize, sep='_')
levels(full$Fsize)
class(full$Surname)
class(full$Fsize)
str(full$Fsize)\
str(full$Fsize)
max(full$Fsize)
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +  # max(full$Fsize)為11
labs(x = 'Family Size') +
theme_few()
ggplot(full[1:891,], aes(x = Fsize, fill =Survived)) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +  # max(full$Fsize)為11
labs(x = 'Family Size') +
theme_few()
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +  # max(full$Fsize)為11
labs(x = 'Family Size') +
theme_few()
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +  # max(full$Fsize)為11
labs(x = 'Family Size')
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +  # max(full$Fsize)為11
labs(x = 'Family Size') +
theme_few() # 去掉背景的網格
View(titanictest)
View(titanictrain)
# Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
# Show family size by survival using a mosaic plot
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
# Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
# Show family size by survival using a mosaic plot
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival')
# Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
# Show family size by survival using a mosaic plot
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
# Create the column child, and indicate whether child or adult
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# Show counts
table(full$Child, full$Survived)
# Adding Mother variable
full$Mother <- 'Not Mother'  # 將此列加入
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <-'Mother'  # Parch為小孩的數量
# Show counts
table(full$Mother, full$Survived)
# Discretize family size
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
# Show family size by survival using a mosaic plot
mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("structuralism.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
docs <- readLines("1.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
docs <- readLines("structuralism.txt")
docs <- gsub("\\[[0-9]+\\]", "", docs)
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
docs <- readLines("1.txt")
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg, control = list())
inspect(docs.tdm)
knitr::opts_chunk$set(echo = TRUE)
library(NLP)
library(tm)
library(jiebaRD)
library(jiebaR)
library(dplyr)
library(wordcloud)
wk <- worker()
text <- readLines("words.txt", encoding = "UTF-8")
stopwords <- c("的", "與", "在", "和","會","是","我","都","來","要","們","一","第","然","後","時","也","了","而","中","為","卻","讓","又","劇","但","他","最","不","這","個","部","元","就","編","坂","二","阪","日","裕","年")
stopwords.pattern <- paste0(stopwords, sep = "|", collapse = "") %>%
substr(1, nchar(.) -1)
text <- gsub(stopwords.pattern, " ", text)
seg <- wk[text]
seg <- as.data.frame(table(seg))
freq <- seg[order(seg$Freq, decreasing = T), ]
wordcloud(freq$seg, freq$Freq,
min.freq = 2, random.order = F,
color = brewer.pal(8, "Dark2"))
docs <- readLines("1.txt")
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
docs <- readLines("1.txt")
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN)
knitr::opts_chunk$set(echo = TRUE)
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
# compare with first doc
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
library(tm)
library(tmcn)
library(Matrix)
library(wordcloud)
library(NLP)
library(RColorBrewer)
docs <- readLines("sy1.txt", encoding = "UTF-8")
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN) # 斷詞
docs.tdm <- TermDocumentMatrix(docs.seg, control = list()) # 把斷詞結果轉換成 term-document matrix
inspect(docs.tdm)
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
query.tfidf <- function(q){
q.position <- which(rownames(docs.tfidf) %in% q)
q.tfidf <- docs.tfidf[q.position, ]
return (q.tfidf)
}
query.tfidf(c("女性", "金句", "真實","愛情"))
cos <- function(x, y){
return (x %*% y / sqrt(x %*% x * y %*% y))[1, 1]
}
# compare with first doc
docs.cos.sim <- apply(docs.tfidf, 2, cos, y = docs.tfidf[, 1])
docs.cos.sim
f <- sort(rowSums(docs.tfidf), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
f <- sort(rowSums(docs.tfidf), decreasing = T)
docs.df <- data.frame(
word = names(f),
freq = f
)
wordcloud(docs.df$word, docs.df$freq, scale=c(5,0.1), colors=brewer.pal(8, "Dark2"))
docs <- readLines("sy1.txt")
docs.corpus <- Corpus(VectorSource(docs))
docs.seg <- tm_map(docs.corpus, segmentCN) # 斷詞
docs.tdm <- TermDocumentMatrix(docs.seg, control = list()) # 把斷詞結果轉換成 term-document matrix
inspect(docs.tdm)
docs.tf <- apply(as.matrix(docs.tdm), 2, function(doc) {doc / sum(doc)})
idf.function <- function(word_doc) { log2( (length(word_doc)+1) / nnzero(word_doc) ) }
docs.idf <- apply(docs.tdm, 1, idf.function)
docs.tfidf <- docs.tf * docs.idf
head(docs.tfidf)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg)
inspect(docs.tdm)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.tdm <- TermDocumentMatrix(docs.seg)
inspect(docs.tdm)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
inspect(docs.tdm)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
setwd("D:/CSX/R-Project_2018Summer/week3/TF_IDF")
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
library(jiebaR)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
library(jiebaR)
library(jiebaRD)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
library(jiebaR)
library(jiebaRD)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
library(jiebaR)
library(jiebaRD)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
docs.corpus <- Corpus(DirSource("./harry_potter_summaries"))
docs.seg <- tm_map(docs.corpus, segmentCN)
setwd("D:/CSX/R-Project_2018Summer/week3/TF_IDF")
docs.corpus <- Corpus(DirSource("./harry_potter"))
docs.seg <- tm_map(docs.corpus, segmentCN)
